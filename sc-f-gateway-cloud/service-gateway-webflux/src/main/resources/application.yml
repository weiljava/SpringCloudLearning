server:
  port: 8083
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    # 每间隔1s，向服务端发送一次心跳，证明自己依然”存活“
    lease-renewal-interval-in-seconds: 1
    # 告诉服务端，如果我2s之内没有给你发心跳，就代表我“死”了，将我踢出掉。
    lease-expiration-duration-in-seconds: 2


spring:
  application:
    name: sc-gateway-webflux
  redis:
    host: localhost
    port: 6379
    password:
  jmx:
    enabled: false
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      routes:
        # =====================================
        - id: mock
          uri: http://localhost:9806
          predicates:
            - Path=/mock/**
        # =====================================
        - id: SERVICE-HI
          uri: lb://SERVICE-HI
          predicates:
            - Path=/test/**
          filters:
            - StripPrefix=1
            # 限流过滤器，使用gateway内置令牌算法
            - name: RequestRateLimiter
              args:
                # 令牌桶每秒填充平均速率,即行等价于允许用户每秒处理多少个请求平均数
                redis-rate-limiter.replenishRate: 5
                # 令牌桶的容量，允许在一秒钟内完成的最大请求数
                redis-rate-limiter.burstCapacity: 10
                # 用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。
                key-resolver: "#{@hostAddrKeyResolver}"

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG
    reactor.netty: DEBUG

management.endpoints.web.exposure.include: '*'



custom-executor-service:
  corePoolSize: 10
  maximumPoolSize: 10
  keepAliveTime: 0
  capacity: 1024
  artifactId: gateway
